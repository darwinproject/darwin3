C
C                             DO NOT EDIT...
C
C ... lines between CCOG block and checksum as they are autogenerated.
C Add new parameters to traits.fpp and run 'make'.

CCOG[[[cog import cog; from checkindices import *]]]
CCOG[[[end]]] (checksum: d41d8cd98f00b204e9800998ecf8427e)

#include "DARWIN_OPTIONS.h"

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|
CBOP 0
C     !ROUTINE: DARWIN_CHECK

C     !INTERFACE:
      SUBROUTINE DARWIN_CHECK( myThid )

C     !DESCRIPTION:
C     Check dependences with other packages:
C     o Print darwin indices (iDIC,...) and ptracer names
C     o to allow for manual check

C     !USES:
      IMPLICIT NONE
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#include "PTRACERS_SIZE.h"
#include "PTRACERS_PARAMS.h"
#include "GCHEM.h"
#include "DARWIN_SIZE.h"
#include "DARWIN_INDICES.h"
#include "DARWIN_PARAMS.h"
#include "DARWIN_TRAITS.h"

C     !INPUT PARAMETERS:
C     myThid -  Number of this instances
      INTEGER myThid
CEOP

#ifdef ALLOW_DARWIN

C     !LOCAL VARIABLES:
C     msgBuf      - Informational/error meesage buffer
      CHARACTER*(MAX_LEN_MBUF) msgBuf
      INTEGER j,jz,iPtr,oUnit
CCOG[[[cog
CCOGcog.out('\n'.join('''
CCOG{pre}      INTEGER i_{name}
CCOG{post}'''.format(name=name, pre=pre, post=post)[1:-1] for name,name6,pre,post in checkflds))
CCOGcog.out('\n')
CCOGcog.out('\n'.join('''
CCOG{pre}      INTEGER i_{name}, e_{name}
CCOG{post}'''.format(name=name, pre=pre, post=post)[1:-1] for name,name5,pre,post in checklflds))
CCOG]]]
      INTEGER i_DIC
      INTEGER i_NO3
      INTEGER i_NO2
      INTEGER i_NH4
      INTEGER i_PO4
      INTEGER i_FeT
      INTEGER i_SiO2
      INTEGER i_DOC
      INTEGER i_DON
      INTEGER i_DOP
      INTEGER i_DOFe
      INTEGER i_POC
      INTEGER i_PON
      INTEGER i_POP
      INTEGER i_POFe
      INTEGER i_POSi
      INTEGER i_PIC
#ifdef DARWIN_ALLOW_CARBON
      INTEGER i_ALK
#endif
#ifdef DARWIN_ALLOW_CARBON
      INTEGER i_O2
#endif
#ifdef DARWIN_ALLOW_CDOM
      INTEGER i_CDOM, e_CDOM
#endif
      INTEGER i_c, e_c
#ifdef DARWIN_ALLOW_NQUOTA
      INTEGER i_n, e_n
#endif
#ifdef DARWIN_ALLOW_PQUOTA
      INTEGER i_p, e_p
#endif
#ifdef DARWIN_ALLOW_FEQUOTA
      INTEGER i_fe, e_fe
#endif
#ifdef DARWIN_ALLOW_SIQUOTA
      INTEGER i_si, e_si
#endif
#ifdef DARWIN_ALLOW_CHLQUOTA
      INTEGER i_Chl, e_Chl
#endif
CCOG[[[end]]] (checksum: fda07ee4b9e30b0d4919bee98d030025)
      INTEGER n_DARWIN

      NAMELIST/DARWIN_INDICES/
CCOG[[[cog
CCOGcog.out('\n'.join('''
CCOG{pre}     &    i_{name},
CCOG{post}'''.format(name=name, pre=pre, post=post)[1:-1] for name,name6,pre,post in checkflds))
CCOGcog.out('\n')
CCOGcog.out('\n'.join('''
CCOG{pre}     &    i_{name}, e_{name},
CCOG{post}'''.format(name=name, pre=pre, post=post)[1:-1] for name,name5,pre,post in checklflds))
CCOG]]]
     &    i_DIC,
     &    i_NO3,
     &    i_NO2,
     &    i_NH4,
     &    i_PO4,
     &    i_FeT,
     &    i_SiO2,
     &    i_DOC,
     &    i_DON,
     &    i_DOP,
     &    i_DOFe,
     &    i_POC,
     &    i_PON,
     &    i_POP,
     &    i_POFe,
     &    i_POSi,
     &    i_PIC,
#ifdef DARWIN_ALLOW_CARBON
     &    i_ALK,
#endif
#ifdef DARWIN_ALLOW_CARBON
     &    i_O2,
#endif
#ifdef DARWIN_ALLOW_CDOM
     &    i_CDOM, e_CDOM,
#endif
     &    i_c, e_c,
#ifdef DARWIN_ALLOW_NQUOTA
     &    i_n, e_n,
#endif
#ifdef DARWIN_ALLOW_PQUOTA
     &    i_p, e_p,
#endif
#ifdef DARWIN_ALLOW_FEQUOTA
     &    i_fe, e_fe,
#endif
#ifdef DARWIN_ALLOW_SIQUOTA
     &    i_si, e_si,
#endif
#ifdef DARWIN_ALLOW_CHLQUOTA
     &    i_Chl, e_Chl,
#endif
CCOG[[[end]]] (checksum: f12561ee0f9d111c504373bd03e7b7fb)
     &    n_DARWIN

      _BEGIN_MASTER(myThid)

      IF ( myProcId.EQ.0 .AND. myThid.EQ.1 ) THEN 
C      need to copy parameters to variables before we can write to namelist
CCOG[[[cog
CCOGcog.out('\n'.join('''
CCOG{pre}       i_{name} = i{name}
CCOG{post}'''.format(name=name, pre=pre, post=post)[1:-1] for name,name6,pre,post in checkflds))
CCOGcog.out('\n')
CCOGcog.out('\n'.join('''
CCOG{pre}       i_{name} = i{name}
CCOG       e_{name} = e{name}
CCOG{post}'''.format(name=name, pre=pre, post=post)[1:-1] for name,name5,pre,post in checklflds))
CCOG]]]
       i_DIC = iDIC
       i_NO3 = iNO3
       i_NO2 = iNO2
       i_NH4 = iNH4
       i_PO4 = iPO4
       i_FeT = iFeT
       i_SiO2 = iSiO2
       i_DOC = iDOC
       i_DON = iDON
       i_DOP = iDOP
       i_DOFe = iDOFe
       i_POC = iPOC
       i_PON = iPON
       i_POP = iPOP
       i_POFe = iPOFe
       i_POSi = iPOSi
       i_PIC = iPIC
#ifdef DARWIN_ALLOW_CARBON
       i_ALK = iALK
#endif
#ifdef DARWIN_ALLOW_CARBON
       i_O2 = iO2
#endif
#ifdef DARWIN_ALLOW_CDOM
       i_CDOM = iCDOM
       e_CDOM = eCDOM
#endif
       i_c = ic
       e_c = ec
#ifdef DARWIN_ALLOW_NQUOTA
       i_n = in
       e_n = en
#endif
#ifdef DARWIN_ALLOW_PQUOTA
       i_p = ip
       e_p = ep
#endif
#ifdef DARWIN_ALLOW_FEQUOTA
       i_fe = ife
       e_fe = efe
#endif
#ifdef DARWIN_ALLOW_SIQUOTA
       i_si = isi
       e_si = esi
#endif
#ifdef DARWIN_ALLOW_CHLQUOTA
       i_Chl = iChl
       e_Chl = eChl
#endif
CCOG[[[end]]] (checksum: 216985aa5ad9c0682720271669178696)
       n_DARWIN = nDARWIN

       CALL MDSFINDUNIT( oUnit, mythid )
       OPEN(oUnit,FILE='darwin_indices.txt',STATUS='unknown')
       WRITE(UNIT=oUnit, NML=DARWIN_INDICES)
       CLOSE(oUnit)
      ENDIF

      WRITE(msgBuf,'(A)') 'DARWIN_CHECK: #define ALLOW_DARWIN'
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

C check exf is compiled and used
#ifdef ALLOW_EXF
      IF ( .NOT. useEXF ) THEN
#else
      IF (.TRUE.) THEN
#endif
        WRITE(msgBuf,'(A)')
     & 'DARWIN_CHECK: ERROR: darwin requires the exf package to be on'
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R DARWIN_CHECK'
      ENDIF

      IF ( nDarwin .GT. PTRACERS_num ) THEN
        WRITE(msgBuf,'(A,I5,A,I5)')
     &    'DARWIN_CHECK: ERROR: nDarwin > PTRACERS_num: ',
     &    nDarwin,' vs ',PTRACERS_num
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R DARWIN_CHECK'
      ENDIF

#ifndef ALLOW_RADTRANS
      IF (.NOT.DARWIN_haveSurfPAR .AND. .NOT.DARWIN_useQsw .AND.
     &    .NOT.usingSphericalPolarGrid) THEN
       WRITE(msgBuf,'(A,A)') 'DARWIN_EXF_READPARMS: ',
     &  'Attempting to use DARWIN_INSOL without a spherical polar grid.'
       CALL PRINT_ERROR( msgBuf, myThid )
       WRITE(msgBuf,'(A,A)') 'DARWIN_EXF_READPARMS: ',
     &  'This is not supported.'
       CALL PRINT_ERROR( msgBuf, myThid )
       WRITE(msgBuf,'(A,A)') 'DARWIN_EXF_READPARMS: ',
     &  'Please provide PARFile or set DARWIN_useQsw.'
       CALL PRINT_ERROR( msgBuf, myThid )
       STOP 'ABNORMAL END: DARWIN_EXF_READPARMS: DARWIN_INSOL vs grid'
      ENDIF
#endif

C check we are not using hollexp and also inhib_graz or DARWIN_GRAZING_SWITCH
      IF (hollexp .NE. 1.0 _d 0) THEN
        IF (inhib_graz_exp .NE. 0) THEN
          WRITE(msgBuf,'(2A)') 'DARWIN_CHECK: ERROR: ',
     &    'hollexp.NE.1 and inhib_graz_exp should not be used together'
          CALL PRINT_ERROR( msgBuf , 1)
          STOP 'ABNORMAL END: S/R DARWIN_CHECK'
        ENDIF
#ifdef DARWIN_GRAZING_SWITCH
        WRITE(msgBuf,'(3A)') 'DARWIN_CHECK: ERROR: ',
     & 'hollexp.NE.1 and DARWIN_GRAZING_SWITCH ',
     & 'should not be used together'
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R DARWIN_CHECK'
#endif
      ENDIF

C log tracer names together with what they should be
      WRITE(msgBuf,'(A)')
     &      'DARWIN_CHECK: iPtr darwin       PTRACERS_names'
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)
CCOG[[[cog
CCOGfor name,name6,cond1,cond2 in checkflds: cog.out('''
CCOG{cond1}      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
CCOG     &  i{name6},'{name6}    ', PTRACERS_names(i{name6})
CCOG      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
CCOG     &                   SQUEEZE_RIGHT,myThid)
CCOG{cond2}'''.format(name=name, name6=name6, cond1=cond1, cond2=cond2))
CCOGfor name,name5,cond1,cond2 in checklflds: cog.out('''
CCOG{cond1}      DO j = 1, e{name}+1-i{name}
CCOG        iPtr = i{name} + j - 1
CCOG        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'DARWIN_CHECK: ',
CCOG     &    iPtr, '{name5}', j, PTRACERS_names(iPtr)
CCOG        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
CCOG     &                     SQUEEZE_RIGHT,myThid)
CCOG      ENDDO
CCOG{cond2}'''.format(name=name, name5=name5, cond1=cond1, cond2=cond2))
CCOG]]]

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iDIC   ,'DIC       ', PTRACERS_names(iDIC   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iNO3   ,'NO3       ', PTRACERS_names(iNO3   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iNO2   ,'NO2       ', PTRACERS_names(iNO2   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iNH4   ,'NH4       ', PTRACERS_names(iNH4   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iPO4   ,'PO4       ', PTRACERS_names(iPO4   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iFeT   ,'FeT       ', PTRACERS_names(iFeT   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iSiO2  ,'SiO2      ', PTRACERS_names(iSiO2  )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iDOC   ,'DOC       ', PTRACERS_names(iDOC   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iDON   ,'DON       ', PTRACERS_names(iDON   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iDOP   ,'DOP       ', PTRACERS_names(iDOP   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iDOFe  ,'DOFe      ', PTRACERS_names(iDOFe  )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iPOC   ,'POC       ', PTRACERS_names(iPOC   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iPON   ,'PON       ', PTRACERS_names(iPON   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iPOP   ,'POP       ', PTRACERS_names(iPOP   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iPOFe  ,'POFe      ', PTRACERS_names(iPOFe  )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iPOSi  ,'POSi      ', PTRACERS_names(iPOSi  )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iPIC   ,'PIC       ', PTRACERS_names(iPIC   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

#ifdef DARWIN_ALLOW_CARBON
      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iALK   ,'ALK       ', PTRACERS_names(iALK   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)
#endif

#ifdef DARWIN_ALLOW_CARBON
      WRITE(msgBuf,'(A,I4,X,A,A32)') 'DARWIN_CHECK: ',
     &  iO2    ,'O2        ', PTRACERS_names(iO2    )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)
#endif

#ifdef DARWIN_ALLOW_CDOM
      DO j = 1, eCDOM+1-iCDOM
        iPtr = iCDOM + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'DARWIN_CHECK: ',
     &    iPtr, 'CDOM ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO
#endif

      DO j = 1, ec+1-ic
        iPtr = ic + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'DARWIN_CHECK: ',
     &    iPtr, 'c    ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO

#ifdef DARWIN_ALLOW_NQUOTA
      DO j = 1, en+1-in
        iPtr = in + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'DARWIN_CHECK: ',
     &    iPtr, 'n    ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO
#endif

#ifdef DARWIN_ALLOW_PQUOTA
      DO j = 1, ep+1-ip
        iPtr = ip + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'DARWIN_CHECK: ',
     &    iPtr, 'p    ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO
#endif

#ifdef DARWIN_ALLOW_FEQUOTA
      DO j = 1, efe+1-ife
        iPtr = ife + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'DARWIN_CHECK: ',
     &    iPtr, 'fe   ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO
#endif

#ifdef DARWIN_ALLOW_SIQUOTA
      DO j = 1, esi+1-isi
        iPtr = isi + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'DARWIN_CHECK: ',
     &    iPtr, 'si   ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO
#endif

#ifdef DARWIN_ALLOW_CHLQUOTA
      DO j = 1, eChl+1-iChl
        iPtr = iChl + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'DARWIN_CHECK: ',
     &    iPtr, 'Chl  ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO
#endif
CCOG[[[end]]] (checksum: 74ce65a9bf6ddd1b59465e34262c2cff)

      _END_MASTER(myThid)

#endif /* ALLOW_DARWIN */

      RETURN
      END

